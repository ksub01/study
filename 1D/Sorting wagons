number = int(input())
wagons = [int(x) for x in input().rstrip().split()]
max_wag = number
min_wag = 1
angle = []
ans = []
for i in range(len(wagons)):
    angle.append(wagons[i])
    ans.append((1, 1))
    while angle and angle[-1] == min_wag:
        min_wag += 1
        ans.append((2, 1))
        angle.pop()
if not angle:
    for i in ans:
        print(i[0], i[1])
else:
    print(0)




Хорошие решения
#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>
#include <stack>
#include <set>
#include <map>
#include <iomanip>
#include <cmath>

using namespace std;

typedef long long ll;
typedef long double ld;


int main() {
	cin.tie(0);
	cout.tie(0);
	ios::sync_with_stdio(0);
	int k_vag;
	cin >> k_vag;
	vector<int> train(k_vag);
	for (int i = 0; i < k_vag; i++) cin >> train[i];
	int count = 1;
	vector<int> tup;
	vector<pair<int, int>> res;
	for (int i = 0; i < k_vag; i++) {
		res.push_back({ 1, 1 });
		tup.push_back(train[i]);
		while (!tup.empty() && tup.back() == count) {
			res.push_back({ 2, 1 });
			count++;
			tup.pop_back();
		}
	}
	if (tup.size() != 0) cout << 0;
	else {
		for (int i = 0; i < res.size(); i++) 
			cout << res[i].first << " " << res[i].second << "\n";
	}
	return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include  <stack>
#include <vector>
#include <string>

using namespace std;

stack <int> s;
vector <string> ans;
int n, c = 1;

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		int x;
		cin >> x;
		ans.push_back("1 1");
		s.push(x);
		int m = 0;
		while (s.size()) {
			if (s.top() == c) {
				c++;
				s.pop();
				m++;
			}
			else {
				break;
			}
		}
		if (m) {
			ans.push_back("2 " + to_string(m));
		}
	}
	if (s.size()) {
		cout << 0;
	}
	else {
		for (string s : ans) {
			cout << s << '\n';
		}
	}
	return 0;
}
Кодировка: 
Скачать
//#include "/Users/stepan_bagritsevich/Dropbox/stdc++.h"
#include <bits/stdc++.h>
 
using namespace std;

#define pb push_back
#define fs first
#define sc second

typedef long long ll;
typedef long double ld;

const int MAX_VAL = 2147483647, MIN_VAL = -2147483648;

struct Stack {
    int a[10000], last = -1;
    
    void push(int x) {
        a[++last] = x;
    }
    
    void pop() {
        last--;
    }
    
    int front() {
        return a[last];
    }
    
    bool empty() {
        return last == -1;
    }
};

int main() {
    int n;
    cin >> n;
    
    Stack s;
    int count = 1;
    vector < int > ans;
    while (n--) {
        int x;
        cin >> x;
        s.push(x);
        ans.pb(1);
        
        while (!s.empty()) {
            if (s.front() == count) {
                count++;
                ans.pb(2);
                s.pop();
            } else
                break;
        }
    }
    
    if (s.empty()) {
        for (int i = 0; i < ans.size(); i++)
            cout << ans[i] << " " << 1 << "\n";
    } else
        cout << 0 << "\n";
    return 0;
}
Кодировка: 
Скачать
n = int(input())
a = list(map(int, input().split()))
b = list()
r = list()
a.reverse()
i = 1
while i <= n:
    k = 0
    while a:
        k += 1
        e = a.pop()
        b.append(e)
        if e == i:
            r.append((1, k))
            break
    k = 0
    while b and b[-1] == i:
        i += 1
        k += 1
        l = b.pop()
    if k > 0:
        r.append((2, k))
    else:
        print(0)
        break
else:
    for e in r:
        print(*e)
Кодировка: 
Скачать
n = int(input())
arr = [int(i) for i in input().split()][::-1]
temp = []
answer = []
need = 1
while len(arr) > 0:
	if arr[-1] == need:
		arr.pop()
		answer.append([1, 1])
		answer.append([2, 1])
		need+=1
	elif len(temp) > 0 and temp[-1] == need:
		temp.pop();
		answer.append([2, 1])
		need += 1
	else:
		temp.append(arr[-1])
		arr.pop()
		answer.append([1, 1])

while len(temp) > 0 and temp[-1] == need:
	temp.pop()
	need += 1
	answer.append([2, 1])

if (len(temp) != 0):
	print(0)
else:
	for i in answer:
		print (' '.join([str(ii) for ii in i]))
