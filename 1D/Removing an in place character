Нет, это не inplace.
Надо считать строку 
а потом удалить нужные символы
в существующей строке,
а не создавать новую строку.

s = input()
cou = []
for i in range(len(s)):
    if s[i] == '@':
        cou.append(i)
ans = ''
for i in range(len(s)):
    if not i in cou:
        ans = ans + s[i]
print(ans)


del -- долгая операция, она каждый раз
сдвигает всю строку,
это по сути вложенный проход по строке,
такое тут запрещено

s = list(input())
i = 0
while i < len(s):
    if s[i] == '@':
        del s[i]
    else:
        i +=1
print(''.join(s))



Вы не удалили элементы.
Вы их просто заменили на пустую строку.
Тут надо именно _удалить_.
У вас, например, при вводе "a@b"
получается ["a", "", "b"],
а должно получиться ["a", "b"]


s = list(input())
i = 0
while i < len(s):
    if s[i] == '@':
        s[i] = ''
    else:
        i +=1
print(''.join(s))


pop -- долгая операция, она каждый раз
сдвигает всю строку,
это по сути вложенный проход по строке,
такое тут запрещено

(Надо не придумать какие-то стандартные функции,
а просто вручную поработать с символами строки)


s = list(input())
i = 0
while i < len(s):
    if s[i] == '@':
        s.pop(i)
        continue
    i += 1

print(''.join(s))


#ready

s = list(input())
m = 0
i = 0
for i in range(len(s)):
    if s[i] != '@':
        s[m] = s[i]
        m += 1
    
    

print(''.join(s[:m]))



Хорошие решения
s = input()


def inplacedel(s):
    a = list(s)
    needle = "@"

    l = len(a)
    i = 0
    j = 0

    for j in range(l):
        if a[j] != needle:
            a[i] = a[j]
            i += 1
    
    return "".join(a[:i])
    

print(inplacedel(s))
Кодировка: 
Скачать
#include<iostream>
#include<string>
using namespace std;
int main()
{
	string line;
	getline(cin, line);
	int k = 0;
	for (int i = 0; i < line.size(); i++)
	{
		if (line[i] != '@')
			line[i - k] = line[i];
		else
			k++;
	}
	line.erase(line.size() - k, k);
	cout << line;
}
Кодировка: 
Скачать
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <vector>
#include <cmath>
#include <queue>
#include <string>
#include <set>
#include <sstream>

using namespace std;

int main() {
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    string s;
    cin >> s;
    int p = 0;

    for (int i = 0; i < s.length(); i++) {
        if (s[i] != '@') {
            s[p++] = s[i];
        }
    }
    s.resize(p);
    cout << s;
    return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <string>

using namespace std;

int main() {
	string s;
	cin >> s;
	int i = 0;
	for (int j = 0; j < s.size(); j++) {
		if (s[j] != '@') {
			s[i] = s[j];
			i++;
		}
	}
	s.resize(i);
	cout << s;
	return 0;
}
Кодировка: 
Скачать
def get_normalized_str(s: str):
    s = list(s)  # typing.List[str]
    j = 0

    for i in range(len(s)):
        if s[i] == '@':
            j += 1
        else:
            s[i - j] = s[i]

    return ''.join(s[:len(s) - j])


print(get_normalized_str(input()))
