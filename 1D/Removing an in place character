Нет, это не inplace.
Надо считать строку 
а потом удалить нужные символы
в существующей строке,
а не создавать новую строку.

s = input()
cou = []
for i in range(len(s)):
    if s[i] == '@':
        cou.append(i)
ans = ''
for i in range(len(s)):
    if not i in cou:
        ans = ans + s[i]
print(ans)


del -- долгая операция, она каждый раз
сдвигает всю строку,
это по сути вложенный проход по строке,
такое тут запрещено

s = list(input())
i = 0
while i < len(s):
    if s[i] == '@':
        del s[i]
    else:
        i +=1
print(''.join(s))



Вы не удалили элементы.
Вы их просто заменили на пустую строку.
Тут надо именно _удалить_.
У вас, например, при вводе "a@b"
получается ["a", "", "b"],
а должно получиться ["a", "b"]


s = list(input())
i = 0
while i < len(s):
    if s[i] == '@':
        s[i] = ''
    else:
        i +=1
print(''.join(s))


pop -- долгая операция, она каждый раз
сдвигает всю строку,
это по сути вложенный проход по строке,
такое тут запрещено

(Надо не придумать какие-то стандартные функции,
а просто вручную поработать с символами строки)


s = list(input())
i = 0
while i < len(s):
    if s[i] == '@':
        s.pop(i)
        continue
    i += 1

print(''.join(s))


#ready

s = list(input())
m = 0
i = 0
for i in range(len(s)):
    if s[i] != '@':
        s[m] = s[i]
        m += 1
    
    

print(''.join(s[:m]))
