def Factor(n):
    A = []
    d = 2
    while d*d <= n:
        if n % d == 0:
            A.append(d)
            n //= d
        else:
            d += 1
    if n != 1:
        A.append(n)
    return A
k = Factor((int(input())))
k = [str(x) for x in k]
print('*'.join(k))


Найди ошибку: Разложение на простые множители
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef long long ll;


int main() {
	ll num, dop;
	cin >> num;
	vector <ll> mnog;
	ll div = 2;
	while (div  * div <= num) {
		while (num % div == 0) {
			mnog.push_back(div);
			num /= div;
		}
		div++;
	}
	if (num != 1) mnog.push_back(div);
	for (int i = 0; i < mnog.size() - 1; i++) {
		cout << mnog[i] << "*";
	}
	cout << mnog.back();
	system("pause");
	return 0;
}


Хорошие решения
#include<bits/stdc++.h>

using namespace std;

int main() {
    int a;
    cin >> a;
    int b = a;
    vector<int> ans;
    for (int i = 2; i <= sqrt(b); ++i) {
        while (b % i == 0) {
            ans.push_back(i);
            b /= i;
        }
    }
    if (b > 1)
        ans.push_back(b);
    for (int i = 0; i < ans.size(); ++i) {
        cout << ans[i];
        if (i != ans.size() - 1)
            cout << "*";
    }
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

//#define DEBUG
#ifdef DEBUG
    ifstream fin("input.txt");
    ofstream fout("output.txt");
    #define cin fin
    #define cout fout
#endif // DEBUG

int main() {
  int64_t n;
  vector<int64_t> result;
  cin >> n;
  int64_t d = 2;
  while (d * d <= n) {
    while (n % d == 0) {
      result.push_back(d);
      n /= d;
    }
    d += 1;
  }
  if (n != 1) {
    result.push_back(n);
  }
  cout << result[0];
  for (int i = 1; i < result.size(); i += 1) {
    cout << "*" << result[i];
  }
  cout << endl;
}
Кодировка: 
Скачать
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <set>
#include <queue>
#include <iomanip>
#include <string>

using namespace std;

vector<int> factors;

int main()
{
    long long n, cnt = 0, tmp = 0;
    cin >> n;
    tmp = n;

    for(long long i = 2; i < sqrt(tmp) + 1; i++)
        while((n % i) == 0)
        {
            n /= i;
            factors.push_back(i);
        }

    if(n != 1)
        factors.push_back(n);

    cout << factors[0];
    for(int i = 1;  i < factors.size(); i++)
        cout << "*" << factors[i];

    return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <deque>
#include <queue>
#include <stack>

using namespace std;

int main()
{
    long long n;
    vector <long long> ans;
    cin >> n;
    for (long long i = 2; i <= n / i; i++) {
        while (n % i == 0) {
            ans.push_back(i);
            n /= i;
        }
    }
    if (n != 1)
        ans.push_back(n);
    for (int i = 0; i < ans.size() - 1; i++) {
        cout << ans[i] << "*";
    }
    cout << ans[ans.size() - 1];
    return 0;

}
Кодировка: 
Скачать
def primfacs(n):
   i = 2
   primfac = []
   while i * i <= n:
       while n % i == 0:
           primfac.append(i)
           n = n // i
       i = i + 1
   if n > 1:
       primfac.append(n)
   return primfac
a = int(input())
q = primfacs(a)
print('*'.join([str(c) for c in q]))
