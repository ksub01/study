pow1(num, n//2) * pow1(num, n//2)
вы два раза вызываете тяжелую функцию.
Это, конечно, долго.
На самом деле, если вы посчитаете,
получится, что у вас линейная сложность.
Надо посчитать степень один раз, сохранить
в переменную и умножить на себя.

def n():
    def pow1(num, n):
        if n == 0:
            return 1
        elif n % 2 == 0:
            return pow1(num, n//2) * pow1(num, n//2)
        else:
            return num*pow1(num, n-1)
    k1 = float(input().rstrip())
    k2 = int(input().rstrip())
    print(pow1(k1, k2))
n()


def pow1(num, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        c = pow1(num, n//2)
        return  c*c
    else:
        return num*pow1(num, n-1)
k1 = float(input().rstrip())
k2 = int(input().rstrip())
print(pow1(k1, k2))


Хорошие решения
#include <iostream>
using namespace std;

double stepen(double a, int n) {
    if (n == 0) {
        return 1;
    }
    if (n % 2 == 0) {
        return stepen(a * a, n / 2);
    }
    else {
        return a * stepen(a, n - 1);
    }
}

int main() {
    double a;
    int n;
    cin >> a >> n;
    cout << stepen(a, n);
	return 0;
}
Кодировка: 
Скачать
#include <iostream>
using namespace std;
double f(double n,int k) {
    if (k == 0) return 1;
    else {
        if (k%2 == 0) return f(n*n,k/2);
        else return f(n,k-1)*n;
    }
}
int main()
{
    double n;
    int k;
    cin>>n>>k;
    cout<<f(n,k);
}
Кодировка: 
Скачать
#include <iostream>

using namespace std;

double pow(double a, int n) {
  if (n == 0) return 1;
  if (n % 2 == 0) {
    double a2 = pow(a, n / 2);
    return a2*a2;
  } else {
    return a * pow(a, n - 1);
  }
}

int main() {
  double a;
  int n;
  cin >> a >> n;
  cout << pow(a, n);
  return 0;
}
