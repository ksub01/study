Странно, что не хватает памяти, 
но в любом случае как-то у вас очень странно и сложно.
Зачем вам массив mas? Разве неверно, что типа
mas[i][j] == i, j всегда? Ну или что-то такое?
Т.е. должно быть достаточно одного массива ans.

n = int(input())
d = int(str(n) + str(n))+1
prost = [True]*d
prost[0] = False
prost[1] = False
for i in range(2, len(prost)):
    if prost[i]:
        for j in range(i*i, d, i):
            prost[j] = False



mas = [[(0, 0) for x in range(n+1)] for x in range(n+1)]
ans = [[0]*(n+1), [0]*(n+1)]
mas[0][1] = 0, 1

for i in range(1, n+1):
    for j in range(1, n+1):
        if j == 1:
            mas[i][j] = mas[i-1][j][0] + 1, mas[i-1][j][1]
        else:
            mas[i][j] = mas[i][j-1][0], mas[i][j-1][1] + 1
for i in range(1, n+1):
    for j in range(1, n+1):
        mas[i][j] = int(str(mas[i][j][0]) + str(mas[i][j][1]))

for i in range(1, n+1):
    for j in range(1, n+1):
        ans[1][j] = max(ans[0][j], ans[1][j-1]) + prost[mas[i][j]]
    ans[0] = ans[1].copy()
print(max(ans[1][n] - 1 - prost[mas[n][n]], 0))


- 1 - prost[int(str(n) + str(n))]
какая-то очень странная конструкция...

n = int(input())
d = int(str(n) + str(n))+1
prost = [True]*d
prost[0] = False
prost[1] = False
for i in range(2, len(prost)):
    if prost[i]:
        for j in range(i*i, d, i):
            prost[j] = False


ans = [[0]*(n+1), [0]*(n+1)]


for i in range(1, n+1):
    for j in range(1, n+1):
        ans[1][j] = max(ans[0][j], ans[1][j-1]) + prost[int(str(i) + str(j))]
    ans[0] = ans[1].copy()
print(max(ans[1][n] - 1 - prost[int(str(n) + str(n))], 0))



Хорошие решения
#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9 + 10;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define fi first
#define se second
//#define double long double
//#define int long long

typedef vector<int> VI;
typedef long long ll;
typedef unsigned long long ull;

//#define int ull
typedef pair<int, int> PII;
int MOD = 998244353;


const int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
const int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};


vector <int> IsPrime(1000000, 1);

int IsGood(int a, int b)
{
    int cnt = 1;
    int t = 10;
    while (t <= b)
    {
        t *= 10;
        cnt++;
    }
    return IsPrime[a * t + b];
}

int main()
{
    int n;
    cin >> n;
    IsPrime[0] = 0;
    IsPrime[1] = 0;
    for (int i = 2; i * i < 1000000; ++i)
    {
        if(IsPrime[i])
        {
            for (int d = i * i; d < 1000000; d += i)
            {
                IsPrime[d] = 0;
            }
        }
    }
    vector <vector <int>> dp(1000, vector <int> (1000));
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            if (i == 1 && j == 1)
                continue;
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + IsGood(i, j);
        }
    }
    cout << dp[n][n];
	return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

//debug defines
#ifdef HOME
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_v(x) cout << #x << " "; for (auto iiii : x) cout << iiii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto iiii : x) cout << '[' << iiii.ff << " " << iiii.ss << ']'' cout << endl;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    int jjj;
    #define wait() cin >> jjj;
#else
    #define debug(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define PO 0;
    #define OL 0;
    #define wait() 0;
#endif // HOME

bool is(int a, int b, vector<bool>& pr)
{
    int t = 10;
    while (t <= b)
        t *= 10;
    return !pr[a * t + b];
}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    vector<bool> pr(1e6, 0);
    for (ll i = 2; i < pr.size(); ++i)
    {
        if (pr[i] == 0)
        {
            for (ll j = i * i; j < pr.size(); j += i){
                pr[j] = 1;
            }
        }
    }

    int n;
    cin >> n;
    vector<vector<int>> dp(n + 1, vector<int>(n + 1));

    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + is(i, j, pr);
 //           cout << dp[i][j] << " ";
        }
 //       cout << endl;
    }
    cout << dp[n][n] - 1;

    return 0;
}
Кодировка: 
Скачать
#include<bits/stdc++.h>
using namespace std;

const int N = 1000001;

bool prime[N + 7];

void computePrimes(){
    for(int i = 2; i <= sqrt(N); i++)
        for (int j = 2 * i; j < N; j +=i) {
            prime[j] = true;
        }
}

bool isPrime(int n){
    return !prime[n];
}
const int M = 1000;
int a[M + 7][M + 7];
int dp[M + 7][M + 7];

int dreamMax(int a,int b,int c){
    return max(a,max(b,c));
}
int main() {
    computePrimes();
    for(int i = 1; i < M; i++)
        for(int j = 1; j < M; j++)
                a[i][j] = isPrime(stoi(to_string(i) + to_string(j)));



    for(int i = 1; i <= M; i++)
        for(int j = 1; j <= M; j++){
            dp[i][j] = dreamMax(dp[i][j],dp[i - 1][j] + a[i][j],dp[i][j - 1] + a[i][j]);
        }
    int n;
    cin >> n;
    cout << dp[n][n] - 1 << endl;
    return 0;
}
Кодировка: 
Скачать
#include <stdio.h>
#include <algorithm>
#include <fstream>
#include <iostream>
#include <vector> 
using namespace std;
 
ifstream in("input.txt");
//ofstream out("output.txt");
int merge(int a, int b){
	int s = 1;
	int x = b;
	while(b){
		b /= 10;
		s*=10;
	}
	return a*s+x;
	
}

int main(){
	int n;
	const int size = 1000001, size2 = 1001;
	scanf("%d", &n);
	bool prime[size];
	for(int i=2;i<size;i++){
		if(!prime[i]){
			for(int j=i+i; j<size; j+=i){
				prime[j] = true;				
			}
		}
	}
	int v[size2][size2];
	v[1][1] = 1;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if(!prime[merge(i,j)]){
				v[i][j] = 1;
			}
			v[i][j] += max(v[i-1][j],v[i][j-1]);			
		}
	}
	printf("%d\n",v[n][n]-1);	
	
}
