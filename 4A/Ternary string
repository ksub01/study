set(s[i:p+1])
очевидно, это вам дает квадратичную сложность,
потому что каждый раз бегает по всей подстроке от i до p+1.
Весь толк от двух указателей теряется.

q = int(input())
for i in range(q):
    s = input()
    p = 0
    ans = 1000000000000
    for i in range(len(s)):
        while p < len(s) - 1 and len(set(s[i:p+1])) != 3:
            p += 1
        if len(set(s[i:p+1])) == 3 and p - i + 1 < ans:
            ans = p - i + 1
    if ans == 1000000000000:
        print(0)
    else:
        print(ans)
        
        
Да, но сложновато.
Вы пытаетесь по сути 
хранить массив bool'овских фпагов,
для этого вам приходится хранить,
где последний раз вы видели это число.
А проще хранить массив количеств чисел,
типа k[x] -- сколько раз цифра x встречается
в текущем отрезке.
Тогда будет проще.

q = int(input())
for i in range(q):
    s = input()
    p = 0
    k = {'1': -1, '2': -1, '3': -1}
    ans = 1000000000000
    for i in range(len(s)):
        if i > 0:
            if k[s[i-1]] == i-1:
                k[s[i-1]] = -1
        if k[s[i]] == -1:
            k[s[i]] = int(i)

        c = 0
        for j in k:
            if k[j] != -1:
                c += 1
        while p < len(s) - 1 and c != 3:
            p += 1
            k[s[p]] = p
            c = 0
            for j in k:
                if k[j] != -1:
                    c += 1
        if c == 3 and p - i + 1 < ans:
            ans = p - i + 1
    if ans == 1000000000000:
        print(0)
    else:
        print(ans)
        
        
        
        орошие решения
#define ll long long
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <queue>
using namespace std;

void true_main() {;
	string s;
	cin >> s;
	int ans = 1e9;
	vector<pair<char, int>> now;
	for (int i = 0; i < s.size();i++) {
		if (now.size() == 0 || now.back().first != s[i]) {
			now.push_back({ s[i], 1 });
		}
		else {
			now.back().second++;
		}
	}
	for (int i = 1; i < now.size() - 1; i++) {
		if (now[i - 1].first != now[i + 1].first) {
			ans = min(ans, now[i].second + 2);
		}
	}
	if (ans == 1e9) {
		ans = 0;
	}
	cout << ans;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	ll t = 1;
	cin >> t;
	for (ll i = 0; i < t; i++) {
		true_main();
		cout << "\n";
	}
	return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

#define all(x) x.begin(), x.end()
#define endl '\n'
#define fastIO ios::sync_with_stdio(0); cout.tie(0); cin.tie(0);
#define fi first
#define mp make_pair
#define pb emplace_back
#define re return
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)
#define se second
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define sz(x) int(x.size())
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
typedef long double ld;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<bool> vb;
typedef vector<char> vc;
typedef vector<int> vi;
typedef vector<pair<int, int>> vii;
typedef vector<long long> vll;
typedef vector<string> vs;
typedef vector<vector<bool>> vvb;
typedef vector<vector<char>> vvc;
typedef vector<vector<int>> vvi;
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

mt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());

void solve()
{
    int l = 0, ans = INT_MAX;
    string s;
    cin >> s;
    vi cnt(3, 0);
    rep(i, sz(s))
    {
        cnt[s[i] - '1']++;
        while (cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0) {
            ans = min(i - l + 1, ans);
            cnt[s[l++] - '1']--;
        }
    }
    if (ans == INT_MAX) cout << 0 << endl;
    else cout << ans << endl;
}

int main()
{
    fastIO;
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int t = 1;
    cin >> t;
    while (t--) solve();
    re 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <fstream>
#include <algorithm>
#include <functional>
#include <array>
#include <chrono>
#include <random>
#include <vector>
#include <string>
#include <cmath>
#include <bitset>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <cassert>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;

void solve() {
    string s;
    cin >> s;
    
    int n = s.size();
    for (char& c : s)
        c -= '1';
    
    int mn = n + 1;
    vector<int> cnt(3);
    for (int i = 0, j = 0; i < n; ++i) {
        ++cnt[s[i]];
        while (j < i && cnt[s[j]] > 1)
            --cnt[s[j]], ++j;
        
        if (cnt[0] && cnt[1] && cnt[2])
            mn = min(mn, i - j + 1);
    }
    cout << (mn > n ? 0 : mn) << '\n';
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr); cout.tie(nullptr);
    
    int t;
    cin >> t;
    while (t--)
        solve();
    
    return 0;
}
Кодировка: 
Скачать
t = int(input())
for _ in range(t):
    l = list(map(int,list(input())))
    ar = []
    st = 1
    for i in range(1,len(l)):
        if(l[i-1]!=l[i]):
            ar.append((i-st,i-1))
            st = 1
        else:
            st+=1
    mn = float("inf")
    for i in range(1,len(ar)):
        if l[ar[i][0]-1] != l[ar[i][0]] and l[ar[i][0]-1] != l[ar[i][1]+1] and l[ar[i][1]+1]!=l[ar[i][0]]:
            mn = min(mn,ar[i][1]-ar[i][0]+3)
    if(mn<=len(l)):
        print(mn)
    else:
        print(0)
Кодировка: 
Скачать
//package algoprog.level4.a.a_2pointers;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class TripleString {

    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        final BufferedReader br = new BufferedReader(new FileReader("/Users/igorz/dev/google-prep/src/main/java/algoprog/input.txt"));

        int n = Integer.parseInt(br.readLine());

        final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        for (int i = 0; i < n; i++) {
            bw.write(solve(br.readLine()) + "\n");
        }
        bw.flush();
    }

    private static int solve(String s) {
        if (s.length() < 3) return 0;

        int min = Integer.MAX_VALUE;
        Map<Character, Integer> map = new HashMap<>();
        map.put('1', 0);
        map.put('2', 0);
        map.put('3', 0);

        int i = 0, j = 0;
        while (i < s.length() && j < s.length()) {
            while (j < s.length() && !containsEach(map)) {
                char c = s.charAt(j);
                map.put(c, map.get(c) + 1);
                j++;
            }

            boolean containsEach = containsEach(map);
            while (i < j && containsEach(map)) {
                char c = s.charAt(i);
                map.put(c, map.get(c) - 1);
                i++;
            }

            if (containsEach && min > j - i + 1) {
                min = j - i + 1;
            }
        }

        return min == Integer.MAX_VALUE ? 0 : min;
    }

    static boolean containsEach(Map<Character, Integer> map) {
        for (Integer value : map.values()) {
            if (value == 0) return false;
        }
        return true;
    }
}
