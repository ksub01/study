Кажется, тут достаточно abs(atan2(...))
import math
x1, y1, x2, y2 = map(int, input().rstrip().split())
ans = math.atan2(x1*y2 - x2*y1, x1*x2 + y1*y2)
if ans < 0:
    ans = 2*math.pi + ans
print(min(ans, 2*math.pi-ans))


Найди ошибку: Угол между векторами

ï»¿#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#pragma optimizitaion_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <math.h>
#include <stdlib.h>
#include <map>
#include <unordered_map>
#include <tuple>
#include <cmath>
#include <functional>
#include <algorithm>
#include <set>
#include <deque>
#include <numeric>
using namespace std;

#define type double
const long double eps = 1e-8;

struct vectr {
	type x, y;
};

istream& operator >> (istream& s, vectr& a) {
	s >> a.x >> a.y;
	return s;
}

type skalarmulti(vectr a, vectr b) {
	return a.x * b.x + a.y * b.y;
}

type vectrmulti(vectr a, vectr b) {
	return a.x * b.y - a.y * b.x;
}

vectr v(vectr a, vectr b) {
	return { b.x - a.x, b.y - a.y };
}

int sign(type num) {
	if (num < -eps) return -1;
	if (num > eps) return 1;
	return 0;
}

bool dot_to_beam(vectr a, vectr b, vectr c) {	// ab -> c
	return sign(skalarmulti(v(a, b), v(a, c))) != -1 && vectrmulti(v(a, b), v(a, c)) == 0;
}

double angle(double ans) {

	if (sign(ans) == -1) {
		return ans + 2 * M_PI;
	}
	else return ans;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	vectr a, b;
	cin >> a >> b;
	
	cout << fixed << setprecision(5) << angle(atan2(vectrmulti(a, b), skalarmulti(a, b)));

	//system("pause");
	return 0;
}



#include <iostream>
#include <iomanip>
#include <math.h>

const double PI = 3.141592653589793238463;

using namespace std;

int main()
{
    double x1, y1, x2, y2;
    cin >> x1 >> y1 >> x2 >> y2;
    double res1 = atan2(y1, x1), res2 = atan2(y2, x2);
    if(res1 < 0) res1 += PI * 2;
    if(res2 < 0) res2 += PI * 2;
    double result = abs(res2 - res1);
    if(result > PI) result -= PI;

    cout << fixed << setprecision(5) << result;
}


Хорошие решения
//#include "/Users/stepan_bagritsevich/Dropbox/stdc++.h"
#include <bits/stdc++.h>
 
using namespace std;

#define pb push_back
#define fs first
#define sc second

typedef long long ll;
typedef long double ld;

const int MAX_VAL = 2147483647, MIN_VAL = -2147483648;

struct point {
    double x, y;
};

double dot_prod(point a, point b) {
    return a.x * b.x + a.y * b.y;
}

double cross_prod(point a, point b) {
    return a.x * b.y - b.x * a.y;
}

int main() {
    point vec1, vec2;
    cin >> vec1.x >> vec1.y >> vec2.x >> vec2.y;
    
    cout << fixed << setprecision(5);
    cout << fabs(atan2(cross_prod(vec1, vec2), dot_prod(vec1, vec2))) << "\n";
    return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9 + 10;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())

#define int long long
typedef vector<int> VI;
typedef long long ll;
typedef unsigned long long ull;

//#define int ull
typedef pair<int, int> PII;
int MOD = 998244353;

const double eps = 0;
const double pi = acos(-1.0);

struct Point
{
	double x, y;
	Point(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
};

istream & operator >> (istream & in, Point & a)
{
	return in >> a.x >> a.y;
}

struct Vector
{
	double x, y;
	Vector(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
	Vector(Point a, Point b)
	{
		x = b.x - a.x;
		y = b.y - a.y;
	}
};

istream & operator >> (istream & in, Vector & a)
{
	return in >> a.x >> a.y;
}

double dot_product(const Vector  a, const Vector  b)
{
	return a.x * b.x + a.y * b.y;
}

double cross_product(const Vector  a, const Vector  b)
{
	return a.x * b.y - a.y * b.x;
}


ostream & operator << (ostream & out, Point  P)
{
    return out << P.x << " " << P.y;
}

double len(const Vector & a)
{
	return hypot(a.x, a.y);
}

double angle(const Vector & a, const Vector & b)
{
	return atan2(cross_product(a, b), dot_product(a, b));
}

double distance(int a, int b, int c, const Point & P)
{
    return (a * P.x + b * P.y + c) / hypot(a, b);
}

Vector operator* (const Vector & a, double k)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator* (double k, const Vector & a)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator/ (const Vector & a, double k)
{
    return Vector(a.x / k, a.y / k);
}
Point operator+ (Point  P, Vector  a)
{
    return Point(P.x + a.x, P.y + a.y);
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
    //freopen("sparse.in", "r", stdin);
    //freopen("sparse.out", "w", stdout);
    Vector a, b;
    cin >> a >> b;
    cout << fixed << setprecision(20) << abs(angle(a, b));
   // cout8 << fixed << setprecision(20) << abs(cross_product(AB, AC)) / 2;
	return 0;
}
Кодировка: 
Скачать
import math


def cross_product(x1, y1, x2, y2):
    return x1 * y2 - y1 * x2


def dot_product(x1, y1, x2, y2):
    return x1 * x2 + y1 * y2


ax, ay, bx, by = map(int, input().split())
print(abs(math.atan2(cross_product(ax, ay, bx, by), dot_product(ax, ay, bx, by))))
Кодировка: 
Скачать
#include<iostream>
#include<cmath>
#define point pair<double, double>
#define x first
#define y second
#define mp make_pair

using namespace std;

double scalar(point v1, point v2){
    return v1.x * v2.x + v1.y * v2.y;
}

double dot(point v1, point v2){
    return v1.x * v2.y - v2.x * v1.y;
}

int main(){
    point p1, p2;
    cin >> p1.x >> p1.y >> p2.x >> p2.y;
    cout << abs(atan2(dot(p1, p2), scalar(p1, p2))) << endl;
}
