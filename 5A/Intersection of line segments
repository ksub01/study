Нет, это плохо работает,
например, если два отрезка на одной прямой,
но не пересекаются

x1, y1, x2, y2= map(int, input().rstrip().split())
x3, y3, x4, y4 = map(int, input().rstrip().split())
ADx = x3 - x1
ADy = y3 - y1
ABx = x2 - x1
ABy = y2 - y1
ACx = x4 - x1
ACy = y4 - y1
if ADx*ABx + ADy*ABy >= 0 and ACx*ABx + ACy*ABy <= 0:
    print('YES')
else:
    print('NO')
    
    
Как минимум,
if 0 <= t <= 1:
это опасно, потому что это работа с вещественными числами.
Вообще, тут не надо делать проверок на вещественные числа,
конкретно этот случай легко обрабатывается
парой векторных произведений.

Вот случай параллельных/совпадающих прямых 
обрабатывается сложно, тут рекомендуется
обычно проверить, что габаритные прямоугольники
отрезков пересекаются. Вроде в Кормене это было довольно
подробно расписано.

x1, y1, x2, y2 = map(int, input().rstrip().split())
x3, y3, x4, y4 = map(int, input().rstrip().split())
A1 = x2 - x1
A2 = y2 - y1
B1 = x4 - x3
B2 = y4 - y3
C1 = x1 - x3
C2 = y1 - y3

e = 1e-7
t1 = (x3 - x1)*(x2 - x1) + (y3 - y1)*(y2 - y1)
t2 = (x3 - x2)*(x2 - x1) + (y3 - y2)*(y2 - y1)
t3 = (x4 - x1)*(x2 - x1) + (y4 - y1)*(y2 - y1)
t4 = (x4 - x2)*(x2 - x1) + (y4 - y2)*(y2 - y1)
if A1*B2 - B1*A2 != 0:
    x = A1*B2 - A2*B1
    t = -(C1*B2 - C2*B1) / x
    ansx = x1 + t*A1
    ansy = y1 + t*A2
    if 0 <= t <= 1:
        print('YES')
    else:
        print('NO')
elif (t1 >= 0 and t2 <= 0) or (t3 >= 0 and t4 <= 0):
    print('YES')
else:
    print('NO')
    
    
Входные данные:
0 0 3 3
-1 1 -3 3

Вывод программы:
YES

Правильный ответ:
NO

x1, y1, x2, y2 = map(int, input().rstrip().split())
x3, y3, x4, y4 = map(int, input().rstrip().split())


e = 1e-5
t1 = (x3 - x1)*(x2 - x1) + (y3 - y1)*(y2 - y1)
t2 = (x3 - x2)*(x2 - x1) + (y3 - y2)*(y2 - y1)
t3 = (x4 - x1)*(x2 - x1) + (y4 - y1)*(y2 - y1)
t4 = (x4 - x2)*(x2 - x1) + (y4 - y2)*(y2 - y1)
x = (x2 - x1) * (y4 - y3) - (y2 - y1) * (x4 - x3)
if not -e < x < e:
    t = -((x1 - x3)*(y4 - y3) - (y1 - y3)*(x4 - x3)) / x
    if 0-e <= t <= 1+e:
        print('YES')
    else:
        print('NO')
elif (t1 >= -e and t2 <= e) or (t3 >= -e and t4 <= e):
    print('YES')
else:
    print('NO')
    


Я зачту, но вообще это делается
полностью в целых числах

x1, y1, x2, y2 = map(int, input().rstrip().split())
x3, y3, x4, y4 = map(int, input().rstrip().split())


e = 1e-5
P1P2x = x2 - x1
P1P2y = y2 - y1
P3P4x = x4 - x3
P3P4y = y4 - y3
P1P3x = x3 - x1
P1P3y = y3 - y1
P2P3x = x3 - x2
P2P3y = y3 - y2
P1P4x = x4 - x1
P1P4y = y4 - y1
P2P4x = x4 - x2
P2P4y = y4 - y2


A1 = P3P4x
A2 = P3P4y
B1 = -P1P2x
B2 = -P1P2y
C1 = -P1P3x
C2 = -P1P3y

det = A1*B2 - A2*B1

t1 = P1P3x*P1P2x + P1P3y*P1P2y
t2 = P2P3x*P1P2x + P2P3y*P1P2y
t3 = P1P4x*P1P2x + P1P4y*P1P2y
t4 = P2P4x*P1P2x + P2P4y*P1P2y
t5 = P1P2x*P1P3y - P1P3x*P1P2y
if not -e < det < e:
    t = (C1*B2 - C2*B1) / det
    s = (A1*C2 - C1*A2) / det
    if 0 - e < t < 1 + e and 0 - e < s < 1 + e:
        print('YES')
    else:
        print('NO')
elif (-e < t5 < e) and ((t1 >= -e and t2 <= e) or (t3 >= -e and t4 <= e)):
    print('YES')
else:
    print('NO')
    

Хорошие решения
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct P{
    ll x, y;
    P() : x(0), y(0) {};
    P(ll x, ll y) : x(x), y(y) {};
};

int f(P a, P b, P p){
    P v1(a.x - b.x, a.y - b.y), v2(p.x - b.x, p.y - b.y);
    ll res = v1.x*v2.y - v1.y*v2.x;
    if (res > 0) return 1;
    if (res < 0) return -1;
    return 0;

}
bool check(int x1, int x2, int x3, int x4){
    if (x1 > x2) swap(x1, x2);
    if (x3 > x4) swap(x3, x4);
    return max(x1, x3) <=  min(x2, x4);
}
int main(){
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    vector<P> a(4);
    for (int i = 0; i < 4; ++i){
        cin >> a[i].x >> a[i].y;
    }
    int t = f(a[0], a[1], a[2]), t1 = f(a[0], a[1], a[3]), t2 = f(a[2], a[3], a[0]),
            t3 = f(a[2], a[3], a[1]);
    if ((t == 0 || t != t1) && (t2 == 0 || t2 != t3)
    && check(a[0].x, a[1].x, a[2].x, a[3].x) && check(a[0].y, a[1].y, a[2].y, a[3].y)){
        cout << "YES";
    }
    else cout << "NO";

    return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <string>
#include <queue>
#include <cmath>

using namespace std;

using ll = long long;
using ld = long double;

struct vec {
    ll x, y;
    vec() : x(0), y(0) {}
    vec(ll x, ll y) : x(x), y(y) {}
    vec(const vec& a, const vec& b) : vec(b.x - a.x, b.y - a.y) {}
};

vec operator +(vec a, const vec& b) {
    return vec(a.x + b.x, a.y + b.y);
}

vec operator -(vec a, const vec& b) {
    return vec(a.x - b.x, a.y - b.y);
}

vec operator *(vec a, ll b) {
    return vec(a.x * b, a.y * b);
}

ll operator *(vec a, const vec& b) {
    return a.x * b.x + a.y * b.y;
}

ll operator ^(vec a, vec b) {
    return a.x * b.y - b.x * a.y;
}

ll squared(const vec& a) {
    return a * a;
}

ld len(const vec& a) {
    return sqrt(squared(a));
}

istream& operator >>(istream& in, vec& a) {
    in >> a.x >> a.y;
    return in;
}

bool intersect(ll l1, ll r1, ll l2, ll r2) {
    if (r1 < l1) swap(r1, l1);
    if (r2 < l2) swap(r2, l2);
    
    return max(l1, l2) <= min(r1, r2);
}

int sign(ll a) {
    return a == 0 ? 0 : (a > 0 ? 1 : -1);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr); cout.tie(nullptr);
    
    vec a, b, c, d;
    cin >> a >> b >> c >> d;
    
    vec ab(a, b), cd(c, d), ac(a, c), ad(a, d), ca(c, a), cb(c, b);
    
    ll c1 = sign(ab ^ ac), c2 = sign(cd ^ ca), c3 = sign(ab ^ ad), c4 = sign(cd ^ cb);
    if ((c1 != c3 || c1 == 0) && (c2 != c4 || c2 == 0)) {
        if (intersect(a.x, b.x, c.x, d.x) && intersect(a.y, b.y, c.y, d.y)) {
            cout << "YES\n";
            return 0;
        }
    }
    cout << "NO\n";
    
    return 0;
}
Кодировка: 
Скачать
//#include "/Users/stepan_bagritsevich/Dropbox/stdc++.h"
#include <bits/stdc++.h>
 
using namespace std;

#define pb push_back
#define fs first
#define sc second

typedef long long ll;
typedef long double ld;

const int MAX_VAL = 2147483647, MIN_VAL = -2147483648;

struct point {
    int x, y;
};

int area(point a, point b, point c) {
    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}

bool bounding_box(int a, int b, int c, int d) {
    if (a > b)
        swap(a, b);
    if (c > d)
        swap(c, d);
    
    return max(a,c) <= min(b,d);
}

bool prov(point a, point b, point c, point d) {
    return bounding_box(a.x, b.x, c.x, d.x) && bounding_box(a.y, b.y, c.y, d.y) && area(a,b,c) * area(a,b,d) <= 0 && area(c,d,a) * area(c,d,b) <= 0;
}

int main() {
    point v1, v2, v3, v4;
    cin >> v1.x >> v1.y >> v2.x >> v2.y >> v3.x >> v3.y >> v4.x >> v4.y;
    cout << ((prov(v1, v2, v3, v4)) ? "YES" : "NO") << "\n";
    return 0;
}
