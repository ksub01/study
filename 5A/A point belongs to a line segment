Да, но вы считаете три произведения,
а на самом деле (внезапно!) достаточно двух


x3, y3, x1, y1, x2, y2 = map(int, input().rstrip().split())
ABx = x2 - x1
ABy = y2 - y1
ACx = x3 - x1
ACy = y3 - y1
CBx = x3 - x2
CBy = y3 - y2
if ABx*ACx + ABy*ACy >= 0 and ABx*ACy - ACx*ABy == 0 and CBx*ABx + CBy*ABy <= 0:
    print('YES')
else:
    print('NO')
    
    
Найди ошибку: Принадлежность точки отрезку
#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const double PI = 3.1415926;
const double EPS = 1e10;

struct Point
{
	int x, y;
	Point(int x1, int y1) {
		x = x1;
		y = y1;
	}
	double polar_angle(Point a) {
		double angle = atan2(a.y, a.x);
		if (angle < 0) angle += 2 * PI;
		return angle;
	}
};

struct Vector
{
	int x, y;
	Vector(Point a, Point b) {
		x = b.x - a.x;
		y = b.y - a.y;
	}
	int dot_product(Vector a, Vector b)
	{
		return b.x * a.x + b.y * a.y;
	}
	int cross_product(Vector a, Vector b)
	{
		return a.x * b.y - a.y * b.x;
	}
	double triangle_square(Vector a, Vector b)
	{
		return abs(0.5 * cross_product(a, b));
	}
	double angle_between_vectors(Vector a, Vector b)
	{
		return abs(atan2(cross_product(a, b), dot_product(a, b)));
	}
	bool does_point_belong_to_ray(Vector ray, Point start_of_ray, Point a)
	{
		Vector b = Vector(start_of_ray, a);
		if (b.cross_product(b, ray) == 0) {
			if (b.dot_product(b, ray) >= 0) {
				return true;
			}
		}
		return false;
	}
	bool does_point_belong_to_segment(Vector segment, Point l_segment, Point r_segment, Point a) 
	{
		Vector b = Vector(l_segment, a);
		Vector c = Vector(r_segment, a);
		if (b.cross_product(b, segment) == 0) {
			if (b.dot_product(b, segment) >= 0) {
				if (c.dot_product(c, segment) < 0) {
					return true;
				}
			}
		}
		return false;
	}
};

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0); cerr.tie(0);
	int x1, y1, x2, y2, x3, y3;
	cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
	Point l_segment = Point(x2, y2);
	Point r_segment = Point(x3, y3);
	Point a = Point(x1, y1);
	Vector segment = Vector(l_segment, r_segment);
	if (segment.does_point_belong_to_segment(segment, l_segment, r_segment, a)) cout << "YES" << endl;
	else cout << "NO" << endl;
	return 0;
}


Хорошие решения
//#include "/Users/stepan_bagritsevich/Dropbox/stdc++.h"
#include <bits/stdc++.h>
 
using namespace std;

#define pb push_back
#define fs first
#define sc second

typedef long long ll;
typedef long double ld;

const int MAX_VAL = 2147483647, MIN_VAL = -2147483648;

struct point {
    int x, y;
};

struct Vector {
    point s, f;
    
    Vector(point start, point finish) {
        s = start;
        f = finish;
    }
    
    point coord() {
        return {f.x - s.x, f.y - s.y};
    }
};

double dot_prod(Vector a, Vector b) {
    point v1 = a.coord(), v2 = b.coord();
    return v1.x * v2.x + v1.y * v2.y;
}

double cross_prod(Vector a, Vector b) {
    point v1 = a.coord(), v2 = b.coord();
    return v1.x * v2.y - v2.x * v1.y;
}

int main() {
    point p, a, b;
    cin >> p.x >> p.y >> a.x >> a.y >> b.x >> b.y;
    
    Vector vec1(a, p), vec2(a, b), vec3(b, a), vec4(b, p);
    cout << ((cross_prod(vec1, vec2) == 0 && dot_prod(vec2, vec1) >= 0 && dot_prod(vec3, vec4) >= 0) ? "YES" : "NO") << "\n";
    return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9 + 10;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())

#define int long long
typedef vector<int> VI;
typedef long long ll;
typedef unsigned long long ull;

//#define int ull
typedef pair<int, int> PII;
int MOD = 998244353;

const double eps = 0;

struct Point
{
	double x, y;
	Point(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
};

istream & operator >> (istream & in, Point & a)
{
	return in >> a.x >> a.y;
}

struct Vector
{
	double x, y;
	Vector(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
	Vector(Point a, Point b)
	{
		x = b.x - a.x;
		y = b.y - a.y;
	}
};

istream & operator >> (istream & in, Vector & a)
{
	return in >> a.x >> a.y;
}

double dot_product(const Vector  a, const Vector  b)
{
	return a.x * b.x + a.y * b.y;
}

double cross_product(const Vector  a, const Vector  b)
{
	return a.x * b.y - a.y * b.x;
}


ostream & operator << (ostream & out, Point  P)
{
    return out << P.x << " " << P.y;
}

double len(const Vector & a)
{
	return hypot(a.x, a.y);
}

double angle(const Vector & a, const Vector & b)
{
	return atan2(cross_product(a, b), dot_product(a, b));
}

double distance(int a, int b, int c, const Point & P)
{
    return (a * P.x + b * P.y + c) / hypot(a, b);
}

Vector operator* (const Vector & a, double k)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator* (double k, const Vector & a)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator/ (const Vector & a, double k)
{
    return Vector(a.x / k, a.y / k);
}
Point operator+ (Point  P, Vector  a)
{
    return Point(P.x + a.x, P.y + a.y);
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
    //freopen("sparse.in", "r", stdin);
    //freopen("sparse.out", "w", stdout);
    Point X, A, B;
    cin >> X >> A >> B;
    if (cross_product(Vector (A, X), Vector (A, B)) == 0 && dot_product(Vector(A, X), Vector (A, B)) >= 0 && dot_product(Vector(B, X), Vector (B, A)) >= 0)
    {
        cout << "YES";
    }
    else
    {
        cout << "NO";
    }
   // cout << fixed << setprecision(20) << abs(cross_product(AB, AC)) / 2;
	return 0;
}
Кодировка: 
Скачать
#include <stdio.h>
#include <fstream>
#include <algorithm>
#include <iostream>
#define ll long long
using namespace std;

struct vect{
	int x,y;
};

main(){
	const bool DEBUG = 1;
	const int INF = 1e9;
	if(DEBUG){
		freopen("input.txt","r",stdin);
	}
	int ax,ay,bx,by,cx,cy;
	scanf("%d%d%d%d%d%d",&ax,&ay,&bx,&by,&cx,&cy);
	vect BA, BC, CA;
	BA.x = ax - bx;
	BA.y = ay - by;
	BC.x = cx - bx;
	BC.y = cy - by;
	CA.x = ax - cx;
	CA.y = ay - cy;
	
	if(BA.x * BC.y - BA.y * BC.x == 0 && BA.x * BC.x + BC.y * BA.y >= 0 && CA.x * (-BC.x) + CA.y * (-BC.y) >= 0){
		printf("YES");
	}
	else{
		printf("NO");
	}	
}
