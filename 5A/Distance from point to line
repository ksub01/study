import math
x3, y3, x1, y1, x2, y2 = map(int, input().rstrip().split())
ACx = x3 - x1
ACy = y3 - y1
ABx = x2 - x1
ABy = y2 - y1
BCx = x3 - x2
BCy = y3 - y2
if ACx*ABx + ACy*ABy >= 0 and BCx*ABx + BCy*ABy <= 0:
    AB = math.hypot(x2-x1, y2-y1)
    v = abs(ABx*ACy - ACx*ABy)
    print(v/AB)
elif ACx*ABx + ACy*ABy < 0:
    print(math.hypot(x3 - x1, y3 - y1))
elif BCx*ABx + BCy*ABy > 0:
    print(math.hypot(x3 - x2, y3 - y2))
    
    
    
    
Хорошие решения
//package algoprog.level5.a.a_easy_geometry;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class PointToSegmentDistance {

    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        final StringTokenizer st = new StringTokenizer(br.readLine());

        int[] a = new int[]{Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())};
        int[] m1 = new int[]{Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())};
        int[] m2 = new int[]{Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())};

        long[] segment1 = vectorByPoints(m1, m2);
        long[] segment2 = vectorByPoints(m2, m1);
        long[] segment1ToPoint = vectorByPoints(m1, a);
        long[] segment2ToPoint = vectorByPoints(m2, a);

        double res;
        if (dotProduct(segment1, segment1ToPoint) <= 0) {
            res = Math.hypot(a[0] - m1[0], a[1] - m1[1]);
        } else if (dotProduct(segment2, segment2ToPoint) <= 0) {
            res = Math.hypot(a[0] - m2[0], a[1] - m2[1]);
        } else {
            res = 1.0 * Math.abs(crossProduct(segment1ToPoint, segment1)) / Math.hypot(m2[0] - m1[0], m2[1] - m1[1]);
        }

        System.out.println(res);
    }

    private static long[] vectorByPoints(int[] from, int[] to) {
        return new long[]{(long) to[0] - from[0], (long) to[1] - from[1]};
    }

    private static long crossProduct(long[] a, long[] b) {
        return a[0] * b[1] - a[1] * b[0];
    }

    private static long dotProduct(long[] a, long[] b) {
        return a[0] * b[0] + a[1] * b[1];
    }

}
Кодировка: 
Скачать
#include <iostream>
#include <fstream>
#include <vector>
#include <functional>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>

using namespace std;

const long double PI = 3.14159265359;

struct Vector2
{
	long long x, y;

	Vector2(long long _x, long long _y)
	{
		x = _x;
		y = _y;
	}
	Vector2()
	{
		x = 0;
		y = 0;
	}

	Vector2 operator+(const Vector2& r) const
	{
		return Vector2(x + r.x, y + r.y);
	}

	bool operator==(const Vector2 & r) const
	{
		return x == r.x && y == r.y;
	}

	Vector2 operator-(const Vector2 & r) const
	{
		return Vector2(x - r.x, y - r.y);
	}

	long double abs()
	{
		return sqrt(x * x + y * y);
	}
};

istream& operator>>(istream & cin, Vector2 & p)
{
	long long x, y;
	cin >> x >> y;
	p = Vector2(x, y);
	return cin;
}

ostream& operator<<(ostream & cout, Vector2 & p)
{
	cout << p.x << ' ' << p.y;
	return cout;
}

long long cross_prod(Vector2 v1, Vector2 v2)
{
	return v1.x* v2.y - v2.x * v1.y;;
}
long long dot_prod(Vector2 v1, Vector2 v2)
{
	return v1.x* v2.x + v1.y * v2.y;
}

int main()
{
	Vector2 v, v1, v2;
	cin >> v >> v1 >> v2;

	if (dot_prod(v2 - v1, v - v1) > 0 && dot_prod(v1 - v2, v - v2) > 0)
	{
		cout << setprecision(20) << abs(cross_prod(v - v1, v - v2)) / (v1 - v2).abs() << endl;
	}
	else
	{
		cout << setprecision(20) << min((v - v1).abs(), (v - v2).abs()) << endl;
	}

	int x;
	cin >> x;
	return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9 + 10;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())

#define int long long

typedef vector<int> VI;
typedef long long ll;
typedef unsigned long long ull;

//#define int ull
typedef pair<int, int> PII;
int MOD = 998244353;

const double eps = 0;
const double pi = acos(-1.0);

struct Point
{
	double x, y;
	Point(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
};

istream & operator >> (istream & in, Point & a)
{
	return in >> a.x >> a.y;
}

struct Vector
{
	double x, y;
	Vector(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
	Vector(Point a, Point b)
	{
		x = b.x - a.x;
		y = b.y - a.y;
	}
};

istream & operator >> (istream & in, Vector & a)
{
	return in >> a.x >> a.y;
}

double dot_product(const Vector & a, const Vector & b)
{
	return a.x * b.x + a.y * b.y;
}

double cross_product(const Vector & a, const Vector & b)
{
	return a.x * b.y - a.y * b.x;
}


ostream & operator << (ostream & out, Point  P)
{
    return out << P.x << " " << P.y;
}

double len(const Vector & a)
{
	return hypot(a.x, a.y);
}

double angle(const Vector & a, const Vector & b)
{
	return atan2(cross_product(a, b), dot_product(a, b));
}

double distance(int a, int b, int c, const Point & P)
{
    return (a * P.x + b * P.y + c) / hypot(a, b);
}

Vector operator* (const Vector & a, double k)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator* (double k, const Vector & a)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator/ (const Vector & a, double k)
{
    return Vector(a.x / k, a.y / k);
}
Point operator+ (Point  P, Vector  a)
{
    return Point(P.x + a.x, P.y + a.y);
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
    //freopen("sparse.in", "r", stdin);
    //freopen("sparse.out", "w", stdout);
    Point A, B, C;
    cin >> C >> A >> B;
    if (dot_product(Vector (A, B), Vector(A, C)) >= 0 && dot_product(Vector(B, A), Vector(B, C)) >= 0)
        cout << fixed << setprecision(20) << abs(cross_product(Vector(A, B), Vector(A, C))) / len(Vector (B, A));
    else
        cout << fixed << setprecision(20) << min(len(Vector (A, C)), len(Vector (B, C)));
	return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

double dist(int x1, int y1, int x2, int y2) {
    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

int main() {
    cout.precision(10);
    int x, y, x1, y1, x2, y2;
    cin >> x >> y >> x1 >> y1 >> x2 >> y2;
    double ans = ((x - x1) * (y2 - y1) - (x2 - x1) * (y - y1)) / dist(x1, y1, x2, y2);
    int sp1 = (x - x1) * (x2 - x1) + (y - y1) * (y2 - y1);
    int sp2 = (x - x2) * (x1 - x2) + (y - y2) * (y1 - y2);
    if (sp1 < 0)
        cout << dist(x, y, x1, y1);
    else if (sp2 < 0)
        cout << dist(x, y, x2, y2);
    else
        cout << abs(ans);
    return 0;
}
Кодировка: 
Скачать
import math
x,y,a,b,c,d=map(int,input().split())
def dot(x1,y1,x2,y2):
	return (x1*x2)+(y1*y2) 
def dist(x1,y1,x2,y2):
	return math.sqrt(((x2-x1)**2)+((y2-y1)**2))
if dot(x-a,y-b,c-a,d-b)<0:
	print(dist(a,b,x,y))
	exit(0)
if dot(a-c,b-d,x-c,y-d)<0:
	print(dist(c,d,x,y))
	exit(0)
C=(x-a)*(d-b)-(c-a)*(y-b)
A=dist(a,b,c,d)
print(abs(C/A))
