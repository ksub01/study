x3, y3, x1, y1, x2, y2 = map(int, input().rstrip().split())
ABx = x2 - x1
ABy = y2 - y1
ACx = x3 - x1
ACy = y3 - y1
if ABx*ACx + ABy*ACy >= 0 and ABx*ACy - ACx*ABy == 0:
    print('YES')
else:
    print('NO')
    

Найди ошибку: Принадлежность точки лучу
ï»¿#define _CRT_SECURE_NO_WARNINGS
#pragma optimizitaion_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <math.h>
#include <stdlib.h>
#include <map>
#include <unordered_map>
#include <tuple>
#include <cmath>
#include <functional>
#include <algorithm>
#include <set>
#include <deque>
#include <numeric>
using namespace std;

#define type int

struct vectr {
	type x, y;
};

istream& operator >> (istream& s, vectr& a) {
	s >> a.x >> a.y;
	return s;
}

type skalarmulti(vectr a, vectr b) {
	return a.x * a.y + b.x * b.y;
}

type vectrmulti(vectr a, vectr b) {
	return a.x * b.y - a.y * b.x;
}

vectr v(vectr a, vectr b) {
	return { b.x - a.x, b.y - a.y };
}

int sign(type num) {
	if (num < 0) return -1;
	if (num > 0) return 1;
	return 0;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	vectr a, b, c;
	cin >> c >> b >> a;

	if (sign(skalarmulti(v(a, b), v(a, c))) != -1 && vectrmulti(v(a, b), v(a, c)) == 0) cout << "YES";
	else cout << "NO";
	
	//system("pause");
	return 0;
}



Хорошие решения
#define _CRT_SECURE_NO_WARNINGS
#pragma optimizitaion_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <math.h>
#include <stdlib.h>
#include <map>
#include <unordered_map>
#include <tuple>
#include <cmath>
#include <functional>
#include <algorithm>
#include <set>
#include <deque>
#include <numeric>
using namespace std;

#define type int

struct vectr {
	type x, y;
};

istream& operator >> (istream& s, vectr& a) {
	s >> a.x >> a.y;
	return s;
}

type skalarmulti(vectr a, vectr b) {
	return a.x * b.x + a.y * b.y;
}

type vectrmulti(vectr a, vectr b) {
	return a.x * b.y - a.y * b.x;
}

vectr v(vectr a, vectr b) {
	return { b.x - a.x, b.y - a.y };
}

int sign(type num) {
	if (num < 0) return -1;
	if (num > 0) return 1;
	return 0;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	vectr a, b, c;
	cin >> c >> a >> b;

	if (sign(skalarmulti(v(a, b), v(a, c))) != -1 && vectrmulti(v(a, b), v(a, c)) == 0) cout << "YES";
	else cout << "NO";
	
	//system("pause");
	return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9 + 10;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())

#define int long long
typedef vector<int> VI;
typedef long long ll;
typedef unsigned long long ull;

//#define int ull
typedef pair<int, int> PII;
int MOD = 998244353;

const double eps = 0;

struct Point
{
	double x, y;
	Point(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
};

istream & operator >> (istream & in, Point & a)
{
	return in >> a.x >> a.y;
}

struct Vector
{
	double x, y;
	Vector(double x0 = 0, double y0 = 0)
	{
		x = x0;
		y = y0;
	}
	Vector(Point a, Point b)
	{
		x = b.x - a.x;
		y = b.y - a.y;
	}
};

istream & operator >> (istream & in, Vector & a)
{
	return in >> a.x >> a.y;
}

double dot_product(const Vector & a, const Vector & b)
{
	return a.x * b.x + a.y * b.y;
}

double cross_product(const Vector & a, const Vector & b)
{
	return a.x * b.y - a.y * b.x;
}


ostream & operator << (ostream & out, Point  P)
{
    return out << P.x << " " << P.y;
}

double len(const Vector & a)
{
	return hypot(a.x, a.y);
}

double angle(const Vector & a, const Vector & b)
{
	return atan2(cross_product(a, b), dot_product(a, b));
}

double distance(int a, int b, int c, const Point & P)
{
    return (a * P.x + b * P.y + c) / hypot(a, b);
}

Vector operator* (const Vector & a, double k)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator* (double k, const Vector & a)
{
    return Vector(a.x * k, a.y * k);
}

Vector operator/ (const Vector & a, double k)
{
    return Vector(a.x / k, a.y / k);
}
Point operator+ (Point  P, Vector  a)
{
    return Point(P.x + a.x, P.y + a.y);
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
    //freopen("sparse.in", "r", stdin);
    //freopen("sparse.out", "w", stdout);
    Point X, A, B;
    cin >> X >> A >> B;
    Vector AX(A, X);
    Vector AB(A, B);
    if (cross_product(AX, AB) == 0 && dot_product(AX, AB) >= 0)
    {
        cout << "YES";
    }
    else
    {
        cout << "NO";
    }
   // cout << fixed << setprecision(20) << abs(cross_product(AB, AC)) / 2;
	return 0;
}
Кодировка: 
Скачать
x,y,a,b,c,d=map(int,input().split())
x1=c-a
y1=d-b
x2=x-a 
y2=y-b
if (x1*y2)-(x2*y1)==0:
	if (x1*x2)+(y1*y2)>=0:
		print("YES")
		exit(0)
print("NO")
Кодировка: 
Скачать
def cross_product(x, y, x1, y1, x2, y2):
    return (x - x1) * (y2 - y1) - (y - y1) * (x2 - x1)


def dot_product(x, y, x1, y1, x2, y2):
    return (x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)


x, y, x1, y1, x2, y2 = map(int, input().split())
if cross_product(x, y, x1, y1, x2, y2) == 0 and dot_product(x, y, x1, y1, x2, y2) >= 0:
    print('YES')
else:
    print('NO')
Кодировка: 
Скачать
#include <stdio.h>
#include <fstream>
#include <algorithm>
#include <iostream>
#define ll long long
using namespace std;

struct vect{
	int x,y;
};

main(){
	const bool DEBUG = 1;
	const int INF = 1e9;
	if(DEBUG){
		freopen("input.txt","r",stdin);
	}
	int ax,ay,bx,by,cx,cy;
	scanf("%d%d%d%d%d%d",&ax,&ay,&bx,&by,&cx,&cy);
	vect BA, BC;
	BA.x = ax - bx;
	BA.y = ay - by;
	BC.x = cx - bx;
	BC.y = cy - by;
	if(BA.x * BC.y - BA.y * BC.x == 0 && BA.x * BC.x + BC.y * BA.y >= 0){
		printf("YES");
	}
	else{
		printf("NO");
	}	
}
