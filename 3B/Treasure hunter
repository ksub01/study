Не надо запускать bfs много раз, это долго.
Запустите его сразу из всех входов, 
или просто запустите в другую сторону -- от клада или что там.

from collections import deque

x, y = map(int, input().split())
x_end = y_end = -1
dungeon = [list('#' * (y + 1))]
for i in range(x):
    dungeon.append(list('#' + input().rstrip()))
    if '*' in dungeon[-1]:
        x_end = i + 1
        y_end = dungeon[-1].index('*')


v1 = int(input())
entrances = []
for i in range(v1):
    x1, y1 = map(int, input().split())
    entrances.append((x1, y1))


ans_list = []
for x1, y1 in entrances:
    d = [[-1] * (y + 1) for j in range(x + 1)]
    d[x1][y1] = 0
    queue = deque()
    queue.append((x1, y1))
    while queue:
        start_x, start_y = queue[0]
        queue.popleft()
        for delta_x, delta_y in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
            end_x, end_y = start_x + delta_x, start_y + delta_y
            if (1 <= end_x <= x) and (1 <= end_y <= y) and d[end_x][end_y] == -1:
                if dungeon[end_x][end_y] == '0' or dungeon[end_x][end_y] == '*':
                    d[end_x][end_y] = d[start_x][start_y] + 1
                    queue.append((end_x, end_y))
    if d[x_end][y_end] != -1:
        ans_list.append(d[x_end][y_end])
    else:
        ans_list.append(-1)

ans_dis = 1000000000
pos = -1
for i in range(len(ans_list)):
    if ans_list[i] != -1 and ans_list[i] < ans_dis:
        pos = i+1
        ans_dis = ans_list[i]
print(pos)


from collections import deque

x, y = map(int, input().split())
x_end = y_end = -1
dungeon = [list('#' * (y + 1))]
for i in range(x):
    dungeon.append(list('#' + input().rstrip()))
    if '*' in dungeon[-1]:
        x_end = i + 1
        y_end = dungeon[-1].index('*')


v1 = int(input())
entrances = []
for i in range(v1):
    x1, y1 = map(int, input().split())
    entrances.append((x1, y1))


ans_list = []
d = [[-1] * (y + 1) for j in range(x + 1)]
d[x_end][y_end] = 0
queue = deque()
queue.append((x_end, y_end))
while queue:
    start_x, start_y = queue[0]
    queue.popleft()
    for delta_x, delta_y in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
        end_x, end_y = start_x + delta_x, start_y + delta_y
        if (1 <= end_x <= x) and (1 <= end_y <= y) and d[end_x][end_y] == -1:
            if dungeon[end_x][end_y] == '0' or dungeon[end_x][end_y] == '*':
                d[end_x][end_y] = d[start_x][start_y] + 1
                queue.append((end_x, end_y))


pos = -1
ans_dist = 100000000
for i in range(len(entrances)):
    x, y = entrances[i]
    if d[x][y] != -1 and d[x][y] < ans_dist:
        pos = i+1
        ans_dist = d[x][y]
print(pos)

Найди ошибку: Кладоискатель
#include <cmath>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;
struct koord {
	int cnt; char pr; int is;
};
vector<vector<koord>> a;
int n, m;
vector<int> bx = { 1, -1, 0, 0 }, by = { 0, 0, 1, -1 };
int main() {
	int x1, y1, x2, y2;
	cin >> n >> m;
	vector<koord> iop(m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> iop[j].pr;
			iop[j].cnt = 1e9;
			if (iop[j].pr == '*') {
				x1 = i;
				y1 = j;
				iop[j].is = -1;
			}
		}
		a.push_back(iop);
	}

	int cn;
	cin >> cn;
	int now = 1;
	queue<pair<int, int>> q;
	for (int i = 0; i < cn; i++) {
		cin >> x2 >> y2;
		q.push(make_pair(x2 - 1, y2 - 1));
		a[x2 - 1][y2 - 1].is = now;
		a[x2 - 1][y2 - 1].cnt = 0;
		now++;
	}
	while (q.size() != 0) {
		pair<int, int> v = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			if (v.first + bx[i] < n && v.first + bx[i] >= 0 && v.second + by[i] >= 0 && v.second + by[i] < n && a[v.first + bx[i]][v.second + by[i]].pr != '1' && a[v.first + bx[i]][v.second + by[i]].cnt > a[v.first][v.second].cnt + 1) {
				a[v.first + bx[i]][v.second + by[i]].cnt = a[v.first][v.second].cnt + 1;
				a[v.first + bx[i]][v.second + by[i]].is = a[v.first][v.second].is;
				q.push(make_pair(v.first + bx[i], v.second + by[i]));
			}
		}
	}
	cout << a[x1][y1].is;
	return 0;
}


from collections import deque

def service (me_x, me_y):
    global dist
    global x
    global y
    
    if (me_x == end_x + 1 and me_y == end_y + 1):
        return
    
    for i, j in ways:
        inside_bounds = (i + me_x > 0 and i + me_x <= n) and (j + me_y > 0 and j + me_y <= m)
        if (inside_bounds):
            not_visited = dist[me_x + i][me_y + j] == -1
            wall = a[me_x + i - 1][me_y + j - 1] == '1'
            if (not_visited and (not wall)):
                x.append(me_x + i)
                y.append(me_y + j)
                dist[me_x + i][me_y + j] = dist[me_x][me_y] + 1

n, m = map(int, input().split())
a = []
for i in range (n):
    a.append(list(input()))
best_result = 1000000000
c = int(input())
x = deque()
y = deque()
for k in range (c):
    start_x, start_y = map(int, input().split())
    for i in range (n):
        for j in range (m):
            if (a[i][j] == '*'):
                end_x, end_y = i, j
    dist = []
    for i in range (n + 1):
        dist.append([-1] * (n + 1))
    dist[start_x][start_y] = 0
    x.append(start_x)
    y.append(start_y)
    ways = [[1, 0], [0, 1], [-1, 0], [0, -1]]
    while True:
        service(x.popleft(), y.popleft())
        if (len(x) == 0 or len(y) == 0):
            break
    if (dist[end_x + 1][end_y + 1] < best_result and dist[end_x + 1][end_y + 1] != -1):
        best_result = dist[end_x + 1][end_y + 1]
        result = k + 1
if (best_result == 1000000000):
    print(-1)
else:
    print(result)
    
    
    
Хорошие решения
#include <iostream>
#include <iomanip>
#include <vector>
#include <deque>
#include <algorithm>

using namespace std;

struct cell
{
	int x, y, p;
	cell(int _x, int _y, int _p)
	{
		x = _x;
		y = _y;
		p = _p;
	}
};

int main()
{
	int n, m;
	cin >> n >> m;
	vector<pair<int, int>> step = { {1, 0}, {0, 1}, {-1, 0}, {0, -1} };

	int x1, y1, x2, y2;
	deque<cell> a;
	vector<vector<bool>> used(n, vector<bool>(m, 0));

	vector<vector<char>> map(n + 2, vector<char>(m + 2, '1'));

	char ch;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> ch;
			map[i + 1][j + 1] = ch;
			if (ch == '*')
			{
				y2 = i + 1;
				x2 = j + 1;
			}
		}
	}

	int r;
	cin >> r;
	for (int i = 0; i < r; i++)
	{
		cin >> y1 >> x1;

		a.push_back(cell(x1, y1, i + 1));
		used[y1 - 1][x1 - 1] = 1;
	}

	while (a.size() > 0)
	{
		auto c = a.front();
		a.pop_front();

		if (c.y == y2 && c.x == x2)
		{
			cout << c.p << endl;
			return 0;
		}

		for (auto i : step)
		{
			int y = i.first + c.y;
			int x = i.second + c.x;

			if (map[y][x] != '1' &&
				!used[y - 1][x - 1])
			{
				a.push_back(cell(x, y, c.p));
				used[y - 1][x - 1] = 1;
			}
		}
	}

	cout << -1 << endl;
	return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <queue>
#include <vector>

#define MOVES 4
#define INF 100 * 101

using namespace std;

const short delta[MOVES][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

short width, height;
vector<vector<short>> graph, distances;

bool inBounds(short x, short y) {
    return !(x < 0 || y < 0 || x >= width || y >= height);
}

void bfs(pair<short, short> start) {
    distances.resize(height, vector<short>(width, -1));
    queue<pair<short, short>> scope;
    
    distances[start.second][start.first] = 0;
    scope.push(start);
    
    short tempX = 0, tempY = 0;
    while(scope.size() > 0) {
        for (short d = 0; d < MOVES; d++) {
            tempX = scope.front().first + delta[d][0];
            tempY = scope.front().second + delta[d][1];
            if (inBounds(tempX, tempY) && distances[tempY][tempX] == -1 && graph[tempY][tempX] == 0) {
                distances[tempY][tempX] = distances[tempY - delta[d][1]][tempX - delta[d][0]] + 1;
                scope.push({tempX, tempY});
            }
        }
        scope.pop();
    }
}

int main() {
    cin >> height >> width;
    
    graph.resize(height, vector<short>(width));
    char in;
    pair<short, short> treasure;
    for (short i = 0; i < height; i++) {
        for (short j = 0; j < width; j++) {
            cin >> in;
            if (in == '*')
                treasure = {j, i};
            graph[i][j] = in % 2;
        }
    }
    bfs(treasure);
    
    short enters, x, y, min = INF, minIndex = -1;
    cin >> enters;
    for (short i = 0; i < enters; i++) {
        cin >> y >> x;
        y--;
        x--;
        if (distances[y][x] < min && distances[y][x] != -1) {
            min = distances[y][x];
            minIndex = i + 1;
        }
    }
    cout << minIndex;
    
    return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;
const int N = (int) 1e3 + 7;
char a[N][N];

int dis[N][N];
bool used[N][N];
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
int n,m,q;
struct Point{
public:
    int x,y;
    void read(){
        cin >> x >> y;
    }
    bool isValid() {
        return 1 <= x && x <= n && 1 <= y && y <= m;
    }
};


Point points[N];

int main() {

    cin >> n >> m;
    Point start;
    for(int i = 1; i <= n; i++){
        for (int j = 1; j <= m; ++j) {
            cin >> a[i][j];
            if (a[i][j] == '*'){
                start.x = i;
                start.y = j;
            }
        }
    }

    cin >> q;

    for (int i = 0; i < q; ++i) {
        points[i].read();
    }

    queue<pair<int,int> > bfsQueue;

    dis[start.x][start.y] = 0;

    bfsQueue.push({start.x,start.y});

    while (!bfsQueue.empty()){
        pair<int,int> cur = bfsQueue.front();

        for(int i = 0; i < 4; i++){
            Point to;
            to.x = cur.first + dx[i];
            to.y = cur.second + dy[i];
            if (to.isValid() && !used[to.x][to.y]  && a[to.x][to.y] == '0') {
                used[to.x][to.y] = true;
                dis[to.x][to.y] = dis[cur.first][cur.second] + 1;
                bfsQueue.push({to.x,to.y});
            }
        }
        bfsQueue.pop();
    }


    int dist = INT_MAX;
    int ans = 0;
    for (int i = 0; i < q; ++i) {
        if (used[points[i].x][points[i].y] && dis[points[i].x][points[i].y] < dist){
            dist = dis[points[i].x][points[i].y];
            ans = i;
        }
    }

    if (dist == INT_MAX){
        cout << -1 << endl;
    } else
    cout << ans + 1 << endl;

    return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;

int main() {
    int n, m, k, ex, ey, vx, vy;
    cin >> n >> m;
    string s;
    vector<int> c(m, -1);
    vector<vector<int>> a(n, c);
    const vector<int> dx = { 1, 0, -1, 0 }, dy = { 0, 1, 0, -1 };
    for (int i = 0; i < n; i++) {
        cin >> s;
        for (int j = 0; j < m; j++)
            if (s[j] == '*') {
                ex = i;
                ey = j;
            }
            else if (s[j] == '1')
                a[i][j] = -2;
    }
    queue<int> x, y;
    cin >> k;
    for (int i = 1; i <= k; i++) {
        cin >> vx >> vy;
        a[vx - 1][vy - 1] = i;
        x.push(vx - 1);
        y.push(vy - 1);
    }
    while ((x.size() > 0) && (a[ex][ey] == -1)) {
        vx = x.front();
        vy = y.front();
        for (int i = 0; i < 4; i++) {
            if ((vx + dx[i] >= 0) && (vx + dx[i] < n) && (vy + dy[i] >= 0) && (vy + dy[i] < m))
                if (a[vx + dx[i]][vy + dy[i]] == -1) {
                    a[vx + dx[i]][vy + dy[i]] = a[vx][vy];
                    x.push(vx + dx[i]);
                    y.push(vy + dy[i]);
                }
        }
        x.pop();
        y.pop();
    }
    cout << a[ex][ey];
    return 0;
}
Кодировка: 
Скачать
from collections import deque


def bfs(x, y):
    q = deque()
    q.append((x, y))
    d[x][y] = 0
    while len(q):
        x, y = q.popleft()
        for dx, dy in zip([-1, 0, 0, 1], [0, -1, 1, 0]):
            nx = x + dx
            ny = y + dy
            if g[nx][ny] == '0':
                if d[nx][ny] == -1:
                    d[nx][ny] = d[x][y] + 1
                    q.append((nx, ny))


# Считываем n, m - размеры лабиринта и сам лабиринт с барьером по периметру
n, m = map(int, input().split())
g = ['#' * (m + 2)]
for i in range(n):
    g.append('#' + input().strip() + '#')
g.append('#' * (m + 2))

# находим координаты клада hx, hy
for i in range(1, n + 2):
    for j in range(1, m + 2):
        if g[i][j] == '*':
            hx = i
            hy = j
            break


k = int(input())
w = []   # список координат входов в лабиринт
for i in range(k):
    x, y = map(int, input().split())
    w.append((x, y))

# строим двумерный массив d, где d[i][j] - расстояние от клада до пустой клетки лабиринта g[i][j]
d = [[-1] * (m + 2) for i in range(n + 2)]

# запускаем поиск в ширину из клетки лабиринта, в которой нахоится клад,
# найдем рассояние от неё до всех достижимых пустых клеток лабиринта
bfs(hx, hy)

# найдем номер ближайшего достижимого выхода
ans = -1
mn = n * m
for i in range(k):
    if d[w[i][0]][w[i][1]] != -1:
        if d[w[i][0]][w[i][1]] < mn:
            mn = d[w[i][0]][w[i][1]]
            ans = i + 1

print(ans)
