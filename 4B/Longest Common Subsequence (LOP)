n = int(input())
mas1 = [0] + [int(x) for x in input().rstrip().split()]
m = int(input())
mas2 = [0] + [int(x) for x in input().rstrip().split()]
ans = [[0]*(m+1) for x in range(n+1)]
for x in range(1, n+1):
    for y in range(1, m+1):
        if mas1[x] == mas2[y]:
            ans[x][y] = ans[x-1][y-1] + 1
        else:
            ans[x][y] = max(ans[x-1][y], ans[x][y-1])
print(ans[-1][-1])


Хорошие решения
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <stack>
#include <queue>
#include <string>

using namespace std;

typedef long long ll;

int main() {
	ll len1, len2;
	cin >> len1;
	vector<ll> mass1(len1 + 1, 0);
	for (ll i = 1; i <= len1; i++) cin >> mass1[i];
	cin >> len2;
	vector<ll> mass2(len2 + 1, 0);
	vector<vector<ll>> res(len1 + 1, mass2);
	for (ll i = 1; i <= len2; i++) cin >> mass2[i];
	for (ll i = 1; i <= len1; i++) {
		for (ll j = 1; j <= len2; j++) {
			if (mass1[i] == mass2[j]) {
				res[i][j] = res[i - 1][j - 1] + 1;
			}
			else {
				res[i][j] = max(res[i - 1][j], res[i][j - 1]);
			}
		}
	}
	cout << res[len1][len2];
	return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <algorithm>

#define f first
#define s second

using namespace std;

const int N = 1e3 + 1, inf = 1e9;

int dp[N][N], p[N], p1[N];

int main(){
    int n, m;
    cin >> n;
    for (int i = 0; i <= 1e3; ++i){
        p[i] = inf;
        p1[i] = inf;
    }
    for (int i = 1; i <= n; ++i){
        cin >> p[i];
    }
    cin >> m;
    for (int i = 1; i <= m; ++i){
        cin >> p1[i];
    }
    for (int i = 1; i <= n; ++i){
        for (int j = 1; j <= m; ++j){
            if(p[i] == p1[j]){
                dp[i][j] = dp[i - 1][j - 1] + 1;
            }else{
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    cout << dp[n][m];
}
Кодировка: 
Скачать
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main(){
    int n, m;
    cin >> n;
    vector <int> a(n);
    for (int i = 0; i < n; i++) cin >> a[i];
    cin >> m;
    vector <int> b(m);
    for (int i = 0; i < m; i++) cin >> b[i];
    vector <vector <int>> res;
    res.assign(n + 1, vector <int> (m + 1));
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= m; j++){
            if (a[i - 1] == b[j - 1]) res[i][j] = res[i - 1][j - 1] + 1;
            else {
                if (res[i - 1][j] >= res[i][j - 1]) res[i][j] = res[i - 1][j];
                else res[i][j] = res[i][j - 1];
            }
        }
    }
    cout << res[n][m];
    return 0;
}
Кодировка: 
Скачать
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <math.h>
#include <cmath>
#include <algorithm>
#include <set>
#include <deque>
using namespace std;
int n;
vector<int> first, second;

vector<int> input() {
	cin >> n;
	vector<int> kek(n);
	for (int i = 0; i < n; i++) {
		cin >> kek[i];
	}
	return kek;
}

ostream& operator << (ostream& s, vector<vector<int>> k) {
	for (auto i : k) {
		for (auto j : i) {
			cout << j << " ";
		}
		cout << '\n';
	}
	cout << '\n';
	return s;
}

int dp_(int i, int j, vector<vector<int>>& dp) {
	if (dp[i][j] == -1) {
		if (i == 0 || j == 0) dp[i][j] = 0;
		else if (first[i - 1] == second[j - 1]) {
			dp[i][j] = dp_(i - 1, j - 1, dp) + 1;
		}
		else dp[i][j] = max(dp_(i - 1, j, dp), dp_(i, j - 1, dp));
	}
	return dp[i][j];
}

int main() {
	first = input(), second = input();
	vector<vector<int>> dp(first.size() + 1, vector<int>(second.size() + 1, -1));

	cout << dp_(first.size(), second.size(), dp);
	//test
	

	//system("pause");
	return 0;
}
Кодировка: 
Скачать
#include <bits/stdc++.h>

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    int m;
    cin >> m;
    vector<int> b(m);
    for (int i = 0; i < m; ++i) {
        cin >> b[i];
    }
    vector<vector<int>> dp(n + 1, vector<int>(m + 1));
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (a[i - 1] == b[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    cout << dp[n][m];
}
