n = int(input())
mas = [int(x) for x in input().rstrip().split()]


def merge(a, b):
    n1 = len(a)
    n2 = len(b)
    c = []
    i = j = 0
    while i < n1 or j < n2:
        if j == n2 or (i < n1 and a[i] < b[j]):
            c.append(a[i])
            i += 1
        else:
            c.append(b[j])
            j += 1
    return c


def sort(m):
    size = len(m)
    if size <= 1:
        return m
    ml = m[:size//2]
    mr = m[size//2:]
    ml = sort(ml)
    mr = sort(mr)
    return merge(ml, mr)


print(*sort(mas))


Хорошие решения
def my_sort(l, r):
    global ar
    
    if (r - l < 1):
        return
    mid = (r + l) // 2
    my_sort(l, mid)
    my_sort(mid + 1, r)
    pointer_1 = l
    pointer_2 = mid + 1
    for i in range (r - l + 1):
        if (pointer_1 > mid):
            ar[pointer_2] = a[pointer_2]
            pointer_2 += 1
        elif (pointer_2 > r):
            ar[r - mid + pointer_1] = a[pointer_1]
            pointer_1 += 1
        else:
            if (a[pointer_1] < a[pointer_2]):
                ar[pointer_1 + pointer_2 - mid - 1] = a[pointer_1]
                pointer_1 += 1
            else:
                ar[pointer_1 + pointer_2 - mid - 1] = a[pointer_2]
                pointer_2 += 1
    for i in range (l, r + 1):
        a[i] = ar[i]

n = int(input())
a = list(map(int, input().split()))
ar = [0] * n
my_sort(0, n - 1)
print(*a)
Кодировка: 
Скачать
#include <iostream>
#include <vector>
#include <deque>

using namespace std;

const int N = 1e5;

int a[N], temp[N];

void merge_sort(int l, int r){
    int m = (l + r) / 2;
    if (l >= r){
        return;
    }
    merge_sort(l, m);
    merge_sort(m + 1, r);
    int p = l, p1 = m + 1;
    for (int i = l; i <= r; ++i){
        if ((p <= m) && (p1 > r || a[p] < a[p1])){
            temp[i] = a[p];
            ++p;
        }else{
            temp[i] = a[p1];
            ++p1;
        }
    }
    for (int i = l; i <= r; ++i){
        a[i] = temp[i];
    }
}

int main(){
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i){
        cin >> a[i];
    }
    merge_sort(0, n - 1);
    for (int i = 0; i < n; ++i){
        cout << a[i] << ' ';
    }
}
Кодировка: 
Скачать
#include <iostream>
#include <vector>

using namespace std;

vector <int> a, b;

void sort(int l, int r){
    if (l >= r) return;
    int m = (l + r) / 2;
    sort(l, m);
    sort(m + 1, r);
    int i = l, j = m + 1;
    for (int k = l; k <= r; k++){
        if (i <= m && ((j > r) or (a[i] < a[j]))) {
            b[k] = a[i]; i++;
        } else {
            b[k] = a[j]; j++;
        }
    }
    for (int k = l; k <= r; k++) {
        a[k] = b[k];
    }
}

int main(){
    unsigned int n;
    cin >> n;
    b.resize(n);
    for (int i = 0; i < n; i++) {
        int temp; cin >> temp;
        a.push_back(temp);
    }
    sort(0, n - 1);
    for (int i : a) cout << i << " ";
    return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <vector>

using namespace std;

int n;
vector<int> arr, buf;

void mergeSort(int left, int right) {
    int mid = (left + right) / 2;
    if (left >= right)
        return;
    mergeSort(left, mid);
    mergeSort(mid + 1, right);
    
    int i1 = left, i2 = mid + 1;
    for (int i = left; i <= right; i++) {
        if ((i1 <= mid) && ((i2 > right) || (arr[i1] < arr[i2]))) {
            buf[i] = arr[i1];
            i1++;
        }
        else {
            buf[i] = arr[i2];
            i2++;
        }
    }
    for (int i = left; i <= right; i++)
        arr[i] = buf[i];
}

int main() {
    cin >> n;
    
    arr.resize(n);
    buf.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    mergeSort(0, n - 1);
    for (int i = 0; i < n; i++) {
        cout << arr[i] << ' ';
    }
    
    return 0;
}
Кодировка: 
Скачать
#include <iostream>
#include <vector>
#include <string>
#include <deque>
#include <set>
using namespace std;
int n;

int logsort(int l, int r, vector<int>& my, vector<int>& help) {
	if (l >= r) return 0;

	int kek = (l + r) / 2;
	logsort(l, kek, my, help);
	logsort(kek + 1, r, my, help);

	int it1 = l, it2 = kek + 1;

	for (int i = l; i <= r; i++) {
		if (it1 <= kek && (it2 > r || my[it1] < my[it2])) {
			help[i] = my[it1];
			it1++;
		}
		else {
			help[i] = my[it2];
			it2++;
		}
	}

	for (int i = l; i <= r; i++)
		my[i] = help[i];

	return 0;
}

int main() {
	cin >> n;
	vector<int> my(n);
	for (int i = 0; i < n; i++)
		cin >> my[i];
	vector<int> help(n, -1);

	logsort(0, n - 1, my, help);

	for (int i = 0; i < n; i++)
		cout << my[i] << ' ';
	
	//system("pause");
	return 0;
}
