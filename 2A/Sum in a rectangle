high, long, value = map(int, input().rstrip().split(' '))
x1 = y1 = x2 = y2 = 0

list1 = []
list1.append([0] * (long+1))
for i in range(high):
    list1.append([0] + list(map(int, input().rstrip().split(' '))))


list2 = []
for i in range(high+1):
    list2.append([0]*(long+1))

for i in range(1, high+1):
    for j in range(1, long+1):
        list2[i][j] = list1[i][j] + list2[i-1][j] + list2[i][j-1] - list2[i-1][j-1]

for i in range(value):
    x1, y1, x2, y2 = map(int, input().split())
    print(list2[x2][y2] - list2[x1-1][y2] - list2[x2][y1-1] + list2[x1-1][y1-1])




Хорошие решения
n, m, k=map(int, input().split())
f=[[0 for i in range(m+1)]]
for i in range(n):
	f.append([0]+list(map(int, input().split())))
p=[[0 for j in range(m+1)] for i in range(n+1)]
for i in range(1, n+1):
	for j in range(1, m+1):
		p[i][j]=p[i-1][j]+p[i][j-1]+f[i][j]-p[i-1][j-1]
#for i in range(n+1):
#	print(*p[i])
for i in range(k):
	x1, y1, x2, y2=map(int, input().split())
	print(p[x2][y2]-p[x1-1][y2]-p[x2][y1-1]+p[x1-1][y1-1])
Кодировка: 
Скачать
#include <iostream>
#include <vector>
using namespace std;
int main()
{
    int n,m,k;
    cin>>n>>m>>k;
    vector <vector <int>> pref(n+1, vector <int> (m+1));
    for (int i=1;i<=n;i++) {
        for (int j=1;j<=m;j++) {
            int c;
            cin>>c;
            pref[i][j] = pref[i-1][j]+pref[i][j-1]+c-pref[i-1][j-1];
        }
    }
    for (int j=0;j<k;j++) {
        int a,b,c,d;
        cin>>a>>b>>c>>d;
        cout<<pref[c][d]-pref[a-1][d]-pref[c][b-1]+pref[a-1][b-1]<<endl;
    }
}
Кодировка: 
Скачать
#include <iostream>
#include<vector>

using namespace std;

int main()
{
	int n, m,a1,b1,a2,b2,k;
	cin >> n >> m>> k;
	vector<vector<int>> v(n+1,vector<int>(m+1));
	vector<vector<int>> p(n+1, vector<int>(m+1));
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			cin >> v[i][j];
		}
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			p[i][j] = p[i][j - 1] +p[i-1][j] -p[i-1][j-1] + v[i][j]; 
		}
	}
	for (int i = 0; i < k; i++)
	{
		cin >> a1 >> b1 >> a2 >> b2;
		cout << p[a2][b2] - p[a1-1][b2] - p[a2][b1-1] + p[a1 - 1][b1 - 1] << "\n";

	}
}
Кодировка: 
Скачать
// https://algoprog.ru/material/p2772

#include <iostream>
#include <vector>

using namespace std;


int main() {
  int n, m, k;
  cin >> n >> m >> k;

  vector<vector<int>> a(n, vector<int>(m));

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      cin >> a[i][j];
    }
  }

  vector<vector<int>> s1(n, vector<int>(m + 1));
  vector<vector<int>> s2(n + 1, vector<int>(m + 1));

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      s1[i][j + 1] = s1[i][j] + a[i][j];
      s2[i + 1][j + 1] = s2[i][j + 1] + s1[i][j + 1];
    }
  }
    
  while (k--) {
    int x1, y1, x2, y2;
    cin >> x1 >> y1 >> x2 >> y2;

    int ans = (s2[x2][y2] - s2[x1-1][y2]) - (s2[x2][y1-1] - s2[x1-1][y1-1]);

    cout << ans << endl;
  }
}
Кодировка: 
Скачать
//package algoprog.level2.a.b_new_prefix_sum;

import java.io.*;
import java.util.StringTokenizer;

public class SumOnMatrix {

    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        final StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());

        final int[][] matrix = readMatrix(n, m, br);
        final int[][] prefix = new int[n + 1][m + 1];

        for (int i = 1; i < prefix.length; i++) {
            for (int j = 1; j < prefix[i].length; j++) {
                prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }

        final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        for (int i = 0; i < k; i++) {
            final StringTokenizer st2 = new StringTokenizer(br.readLine());
            int i1 = Integer.parseInt(st2.nextToken());
            int j1 = Integer.parseInt(st2.nextToken());
            int i2 = Integer.parseInt(st2.nextToken());
            int j2 = Integer.parseInt(st2.nextToken());

            int res = prefix[i2][j2] - prefix[i1 - 1][j2] - prefix[i2][j1 - 1] + prefix[i1 - 1][j1 - 1];
            bw.write(res + "\n");
        }

        bw.flush();
    }

    private static int[][] readMatrix(int n, int m, BufferedReader br) throws IOException {
        int[][] graph = new int[n][];
        for (int i = 0; i < n; i++) {
            graph[i] = readArray(m, br);
        }
        return graph;
    }

    private static int[] readArray(int n, BufferedReader br) throws IOException {
        int[] arr = new int[n];
        final StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }
        return arr;
    }
}
